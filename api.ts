/* tslint:disable */
/* eslint-disable */
/**
 * Dam Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AssetMetadata
 */
export interface AssetMetadata {
    /**
     * 
     * @type {string}
     * @memberof AssetMetadata
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetMetadata
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AssetOriginTypes = {
    External: 'EXTERNAL',
    S3: 'S3'
} as const;

export type AssetOriginTypes = typeof AssetOriginTypes[keyof typeof AssetOriginTypes];


/**
 * 
 * @export
 * @interface BatchUploadAssetsRequestFiles
 */
export interface BatchUploadAssetsRequestFiles {
    /**
     * 
     * @type {string}
     * @memberof BatchUploadAssetsRequestFiles
     */
    'filename': string;
    /**
     * 
     * @type {string}
     * @memberof BatchUploadAssetsRequestFiles
     */
    'size': string;
    /**
     * 
     * @type {string}
     * @memberof BatchUploadAssetsRequestFiles
     */
    'mimeType': string;
}
/**
 * 
 * @export
 * @interface DamAsset
 */
export interface DamAsset {
    /**
     * 
     * @type {string}
     * @memberof DamAsset
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DamAsset
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DamAsset
     */
    'id'?: string;
    /**
     * 
     * @type {DamAssetType}
     * @memberof DamAsset
     */
    'type'?: DamAssetType;
    /**
     * 
     * @type {string}
     * @memberof DamAsset
     */
    'code'?: string;
    /**
     * 
     * @type {Array<AssetMetadata>}
     * @memberof DamAsset
     */
    'metadata'?: Array<AssetMetadata>;
    /**
     * 
     * @type {string}
     * @memberof DamAsset
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof DamAsset
     */
    'publicUrl'?: string;
}


/**
 * 
 * @export
 * @interface DamAssetOrigin
 */
export interface DamAssetOrigin {
    /**
     * 
     * @type {string}
     * @memberof DamAssetOrigin
     */
    'url'?: string;
    /**
     * 
     * @type {AssetOriginTypes}
     * @memberof DamAssetOrigin
     */
    'type'?: AssetOriginTypes;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const DamAssetType = {
    Unknown: 'UNKNOWN',
    Image: 'IMAGE',
    Video: 'VIDEO',
    VideoExternal: 'VIDEO_EXTERNAL',
    Application: 'APPLICATION'
} as const;

export type DamAssetType = typeof DamAssetType[keyof typeof DamAssetType];


/**
 * 
 * @export
 * @interface DamBatchUploadAssetsRequest
 */
export interface DamBatchUploadAssetsRequest {
    /**
     * 
     * @type {string}
     * @memberof DamBatchUploadAssetsRequest
     */
    'tenantId': string;
    /**
     * 
     * @type {Array<BatchUploadAssetsRequestFiles>}
     * @memberof DamBatchUploadAssetsRequest
     */
    'files': Array<BatchUploadAssetsRequestFiles>;
}
/**
 * 
 * @export
 * @interface DamBatchUploadAssetsResponse
 */
export interface DamBatchUploadAssetsResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof DamBatchUploadAssetsResponse
     */
    'preSignedUrls'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DamCreateAssetRequest
 */
export interface DamCreateAssetRequest {
    /**
     * 
     * @type {string}
     * @memberof DamCreateAssetRequest
     */
    'tenantId': string;
    /**
     * 
     * @type {DamAssetType}
     * @memberof DamCreateAssetRequest
     */
    'type': DamAssetType;
    /**
     * 
     * @type {string}
     * @memberof DamCreateAssetRequest
     */
    'code': string;
    /**
     * 
     * @type {Array<AssetMetadata>}
     * @memberof DamCreateAssetRequest
     */
    'metadata'?: Array<AssetMetadata>;
    /**
     * 
     * @type {DamAssetOrigin}
     * @memberof DamCreateAssetRequest
     */
    'origin': DamAssetOrigin;
}


/**
 * 
 * @export
 * @interface DamGetAssetByCodeRequest
 */
export interface DamGetAssetByCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof DamGetAssetByCodeRequest
     */
    'tenantId': string;
    /**
     * 
     * @type {string}
     * @memberof DamGetAssetByCodeRequest
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface DamListAssetsByCodesRequest
 */
export interface DamListAssetsByCodesRequest {
    /**
     * 
     * @type {string}
     * @memberof DamListAssetsByCodesRequest
     */
    'tenantId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DamListAssetsByCodesRequest
     */
    'codes': Array<string>;
}
/**
 * 
 * @export
 * @interface DamListAssetsByCodesResponse
 */
export interface DamListAssetsByCodesResponse {
    /**
     * 
     * @type {Array<DamAsset>}
     * @memberof DamListAssetsByCodesResponse
     */
    'assets'?: Array<DamAsset>;
}
/**
 * 
 * @export
 * @interface DamListAssetsByIdsRequest
 */
export interface DamListAssetsByIdsRequest {
    /**
     * 
     * @type {string}
     * @memberof DamListAssetsByIdsRequest
     */
    'tenantId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DamListAssetsByIdsRequest
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @interface DamListAssetsByIdsResponse
 */
export interface DamListAssetsByIdsResponse {
    /**
     * 
     * @type {Array<DamAsset>}
     * @memberof DamListAssetsByIdsResponse
     */
    'assets'?: Array<DamAsset>;
}
/**
 * 
 * @export
 * @interface DamListAssetsRequest
 */
export interface DamListAssetsRequest {
    /**
     * 
     * @type {string}
     * @memberof DamListAssetsRequest
     */
    'tenantId': string;
    /**
     * The maximum number of assets to return. The service may return fewer than this value. If unspecified, at most 10 assets will be returned. The maximum value is 100; values above 100 will be coerced to 100.
     * @type {number}
     * @memberof DamListAssetsRequest
     */
    'pageSize'?: number;
    /**
     * A page token, received from a previous `ListAssets` call. Provide this to retrieve the subsequent page.   When paginating, all other parameters provided to `ListAssets` must match the call that provided the page token.
     * @type {string}
     * @memberof DamListAssetsRequest
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @interface DamListAssetsResponse
 */
export interface DamListAssetsResponse {
    /**
     * 
     * @type {Array<DamAsset>}
     * @memberof DamListAssetsResponse
     */
    'assets'?: Array<DamAsset>;
    /**
     * A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
     * @type {string}
     * @memberof DamListAssetsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface DamUpdateAssetRequest
 */
export interface DamUpdateAssetRequest {
    /**
     * 
     * @type {string}
     * @memberof DamUpdateAssetRequest
     */
    'tenantId': string;
    /**
     * 
     * @type {string}
     * @memberof DamUpdateAssetRequest
     */
    'id': string;
    /**
     * 
     * @type {UpdateAssetRequestPayload}
     * @memberof DamUpdateAssetRequest
     */
    'payload'?: UpdateAssetRequestPayload;
    /**
     * 
     * @type {string}
     * @memberof DamUpdateAssetRequest
     */
    'payloadMask'?: string;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface UpdateAssetRequestPayload
 */
export interface UpdateAssetRequestPayload {
    /**
     * 
     * @type {string}
     * @memberof UpdateAssetRequestPayload
     */
    'code'?: string;
    /**
     * 
     * @type {DamAssetOrigin}
     * @memberof UpdateAssetRequestPayload
     */
    'origin': DamAssetOrigin;
    /**
     * 
     * @type {Array<AssetMetadata>}
     * @memberof UpdateAssetRequestPayload
     */
    'metadata'?: Array<AssetMetadata>;
}

/**
 * BasicOperationsApi - axios parameter creator
 * @export
 */
export const BasicOperationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Batch Upload Assets
         * @param {DamBatchUploadAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUploadAssets: async (body: DamBatchUploadAssetsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('batchUploadAssets', 'body', body)
            const localVarPath = `/dam.Dam/BatchUploadAssets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Batch Upload Assets
         * @param {DamBatchUploadAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUploadAssets_1: async (body: DamBatchUploadAssetsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('batchUploadAssets_1', 'body', body)
            const localVarPath = `/dam/batch_upload_assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Asset
         * @param {DamCreateAssetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAsset: async (body: DamCreateAssetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createAsset', 'body', body)
            const localVarPath = `/dam.Dam/CreateAsset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Asset
         * @param {DamCreateAssetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAsset_2: async (body: DamCreateAssetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createAsset_2', 'body', body)
            const localVarPath = `/dam/create_asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Asset By Code
         * @param {DamGetAssetByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetByCode: async (body: DamGetAssetByCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getAssetByCode', 'body', body)
            const localVarPath = `/dam.Dam/GetAssetByCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Asset By Code
         * @param {DamGetAssetByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetByCode_3: async (body: DamGetAssetByCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getAssetByCode_3', 'body', body)
            const localVarPath = `/dam/get_asset_by_code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Assets
         * @param {DamListAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssets: async (body: DamListAssetsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listAssets', 'body', body)
            const localVarPath = `/dam.Dam/ListAssets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Assets By Codes
         * @param {DamListAssetsByCodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssetsByCodes: async (body: DamListAssetsByCodesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listAssetsByCodes', 'body', body)
            const localVarPath = `/dam.Dam/ListAssetsByCodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Assets By Codes
         * @param {DamListAssetsByCodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssetsByCodes_4: async (body: DamListAssetsByCodesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listAssetsByCodes_4', 'body', body)
            const localVarPath = `/dam/list_assets_by_codes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Assets By Ids
         * @param {DamListAssetsByIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssetsByIds: async (body: DamListAssetsByIdsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listAssetsByIds', 'body', body)
            const localVarPath = `/dam.Dam/ListAssetsByIds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Assets By Ids
         * @param {DamListAssetsByIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssetsByIds_5: async (body: DamListAssetsByIdsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listAssetsByIds_5', 'body', body)
            const localVarPath = `/dam/list_assets_by_ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Assets
         * @param {DamListAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssets_6: async (body: DamListAssetsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listAssets_6', 'body', body)
            const localVarPath = `/dam/list_assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Asset
         * @param {DamUpdateAssetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAsset: async (body: DamUpdateAssetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateAsset', 'body', body)
            const localVarPath = `/dam.Dam/UpdateAsset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Asset
         * @param {DamUpdateAssetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAsset_7: async (body: DamUpdateAssetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateAsset_7', 'body', body)
            const localVarPath = `/dam/update_asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicOperationsApi - functional programming interface
 * @export
 */
export const BasicOperationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BasicOperationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Batch Upload Assets
         * @param {DamBatchUploadAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchUploadAssets(body: DamBatchUploadAssetsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamBatchUploadAssetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchUploadAssets(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.batchUploadAssets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Batch Upload Assets
         * @param {DamBatchUploadAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchUploadAssets_1(body: DamBatchUploadAssetsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamBatchUploadAssetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchUploadAssets_1(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.batchUploadAssets_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Asset
         * @param {DamCreateAssetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAsset(body: DamCreateAssetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAsset(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.createAsset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Asset
         * @param {DamCreateAssetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAsset_2(body: DamCreateAssetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAsset_2(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.createAsset_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Asset By Code
         * @param {DamGetAssetByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetByCode(body: DamGetAssetByCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetByCode(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.getAssetByCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Asset By Code
         * @param {DamGetAssetByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetByCode_3(body: DamGetAssetByCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetByCode_3(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.getAssetByCode_3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Assets
         * @param {DamListAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssets(body: DamListAssetsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamListAssetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssets(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.listAssets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Assets By Codes
         * @param {DamListAssetsByCodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssetsByCodes(body: DamListAssetsByCodesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamListAssetsByCodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssetsByCodes(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.listAssetsByCodes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Assets By Codes
         * @param {DamListAssetsByCodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssetsByCodes_4(body: DamListAssetsByCodesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamListAssetsByCodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssetsByCodes_4(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.listAssetsByCodes_4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Assets By Ids
         * @param {DamListAssetsByIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssetsByIds(body: DamListAssetsByIdsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamListAssetsByIdsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssetsByIds(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.listAssetsByIds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Assets By Ids
         * @param {DamListAssetsByIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssetsByIds_5(body: DamListAssetsByIdsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamListAssetsByIdsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssetsByIds_5(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.listAssetsByIds_5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Assets
         * @param {DamListAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssets_6(body: DamListAssetsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamListAssetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssets_6(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.listAssets_6']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Asset
         * @param {DamUpdateAssetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAsset(body: DamUpdateAssetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAsset(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.updateAsset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Asset
         * @param {DamUpdateAssetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAsset_7(body: DamUpdateAssetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DamAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAsset_7(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicOperationsApi.updateAsset_7']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BasicOperationsApi - factory interface
 * @export
 */
export const BasicOperationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BasicOperationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Batch Upload Assets
         * @param {DamBatchUploadAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUploadAssets(body: DamBatchUploadAssetsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamBatchUploadAssetsResponse> {
            return localVarFp.batchUploadAssets(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Batch Upload Assets
         * @param {DamBatchUploadAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUploadAssets_1(body: DamBatchUploadAssetsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamBatchUploadAssetsResponse> {
            return localVarFp.batchUploadAssets_1(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Asset
         * @param {DamCreateAssetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAsset(body: DamCreateAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamAsset> {
            return localVarFp.createAsset(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Asset
         * @param {DamCreateAssetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAsset_2(body: DamCreateAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamAsset> {
            return localVarFp.createAsset_2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Asset By Code
         * @param {DamGetAssetByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetByCode(body: DamGetAssetByCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamAsset> {
            return localVarFp.getAssetByCode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Asset By Code
         * @param {DamGetAssetByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetByCode_3(body: DamGetAssetByCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamAsset> {
            return localVarFp.getAssetByCode_3(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Assets
         * @param {DamListAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssets(body: DamListAssetsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamListAssetsResponse> {
            return localVarFp.listAssets(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Assets By Codes
         * @param {DamListAssetsByCodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssetsByCodes(body: DamListAssetsByCodesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamListAssetsByCodesResponse> {
            return localVarFp.listAssetsByCodes(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Assets By Codes
         * @param {DamListAssetsByCodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssetsByCodes_4(body: DamListAssetsByCodesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamListAssetsByCodesResponse> {
            return localVarFp.listAssetsByCodes_4(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Assets By Ids
         * @param {DamListAssetsByIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssetsByIds(body: DamListAssetsByIdsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamListAssetsByIdsResponse> {
            return localVarFp.listAssetsByIds(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Assets By Ids
         * @param {DamListAssetsByIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssetsByIds_5(body: DamListAssetsByIdsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamListAssetsByIdsResponse> {
            return localVarFp.listAssetsByIds_5(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Assets
         * @param {DamListAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssets_6(body: DamListAssetsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamListAssetsResponse> {
            return localVarFp.listAssets_6(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Asset
         * @param {DamUpdateAssetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAsset(body: DamUpdateAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamAsset> {
            return localVarFp.updateAsset(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Asset
         * @param {DamUpdateAssetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAsset_7(body: DamUpdateAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DamAsset> {
            return localVarFp.updateAsset_7(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BasicOperationsApi - object-oriented interface
 * @export
 * @class BasicOperationsApi
 * @extends {BaseAPI}
 */
export class BasicOperationsApi extends BaseAPI {
    /**
     * 
     * @summary Batch Upload Assets
     * @param {DamBatchUploadAssetsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public batchUploadAssets(body: DamBatchUploadAssetsRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).batchUploadAssets(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Batch Upload Assets
     * @param {DamBatchUploadAssetsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public batchUploadAssets_1(body: DamBatchUploadAssetsRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).batchUploadAssets_1(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Asset
     * @param {DamCreateAssetRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public createAsset(body: DamCreateAssetRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).createAsset(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Asset
     * @param {DamCreateAssetRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public createAsset_2(body: DamCreateAssetRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).createAsset_2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Asset By Code
     * @param {DamGetAssetByCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public getAssetByCode(body: DamGetAssetByCodeRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).getAssetByCode(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Asset By Code
     * @param {DamGetAssetByCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public getAssetByCode_3(body: DamGetAssetByCodeRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).getAssetByCode_3(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Assets
     * @param {DamListAssetsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public listAssets(body: DamListAssetsRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).listAssets(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Assets By Codes
     * @param {DamListAssetsByCodesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public listAssetsByCodes(body: DamListAssetsByCodesRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).listAssetsByCodes(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Assets By Codes
     * @param {DamListAssetsByCodesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public listAssetsByCodes_4(body: DamListAssetsByCodesRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).listAssetsByCodes_4(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Assets By Ids
     * @param {DamListAssetsByIdsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public listAssetsByIds(body: DamListAssetsByIdsRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).listAssetsByIds(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Assets By Ids
     * @param {DamListAssetsByIdsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public listAssetsByIds_5(body: DamListAssetsByIdsRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).listAssetsByIds_5(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Assets
     * @param {DamListAssetsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public listAssets_6(body: DamListAssetsRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).listAssets_6(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Asset
     * @param {DamUpdateAssetRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public updateAsset(body: DamUpdateAssetRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).updateAsset(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Asset
     * @param {DamUpdateAssetRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public updateAsset_7(body: DamUpdateAssetRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).updateAsset_7(body, options).then((request) => request(this.axios, this.basePath));
    }
}



